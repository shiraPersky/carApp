generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Service {
  id                 Int      @id @default(autoincrement())
  license_plate   String   // Car number (license plate)
  car_id             Int
  service_type       String
  date               DateTime
  time               String
  odometer           Int
  place              String
  driver             String
  paymentMethod      String
  file_attachment    String?
  cost               Float
  notes              String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Refueling {
  id             Int      @id @default(autoincrement())
  license_plate   String  // Car number (license plate)
  date           DateTime
  time           String
  odometer       Int
  kindOfFuel     String
  pricePerLiter  Float
  totalCost      Float
  liters         Float
  gasStation     String
  driver         String
  fileAttachment String?
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Car {
  id              Int      @id @default(autoincrement())  // Unique identifier for the car
  license_plate   String   @unique  // Car number (license plate)
  make            String   // Car brand (e.g., Toyota)
  model           String   // Car model (e.g., Corolla)
  year            Int      // Year of manufacture
  color           String   // Color of the car
  emission_group  String?  // Infection group (emission classification, optional)
  valid_until     DateTime // Validity of the license (license expiration)
  trim_level      String?  // Finish level (trim level of the car, optional)
  last_test       DateTime // Last test date
  model_type      String   // Model type (private or commercial)
  model_number    String   // Model number of the car
  odometer        Int      @default(0) // Main odometer value
  created_at      DateTime @default(now())  // Timestamp when car was added
  updated_at      DateTime @updatedAt  // Timestamp for last update

  reminders     Reminder[] // Relation to Reminder model

  @@map("cars") // Map to database table 'cars'
}

model Reminder {
  id                   Int       @id @default(autoincrement())  // Primary key
  license_plate        String    // Foreign key to Car model
  description          String    // Description of the reminder (e.g., "Oil Change", "Tire Replacement")
  
  start_date           DateTime? // The date when the reminder starts (optional)
  start_odometer       Int?      // The odometer reading when the reminder starts (optional)
  
  due_date             DateTime? // Optional date for the next reminder (if time-based)
  next_due_km          Int?      // Optional odometer value for the next reminder (if distance-based)
  repeat_by_days       Int?      // Interval in days (e.g., every 180 days for oil change)
  repeat_by_km         Int?      // Interval in kilometers (e.g., every 10,000 km)
  
  notify_before_days   Int?      // Notify this many days before the due date
  notify_before_km     Int?      // Notify this many kilometers before the target distance
  
  completed            Boolean   @default(false) // Status of the reminder (true = completed)
  
  created_at           DateTime  @default(now())  // Timestamp when the reminder was created
  updated_at           DateTime  @updatedAt       // Timestamp for the last update

  // Relations
  car                  Car       @relation(fields: [license_plate], references: [license_plate])  // Link to the Car model

  @@map("reminders") // Optional: Map this model to a database table named 'reminders'
}
